// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
        provider = "prisma-client-js"
}

datasource db {
        provider = "postgresql"
        url      = env("DATABASE_URL")
}

model User {
        id            Int            @id @default(autoincrement())
        name          String
        email         String         @unique
        passwordHash  String
        refreshTokens RefreshToken[]

        links    Link[]
        projects Project[]

        createdAt DateTime @default(now())
        updatedAt DateTime @default(now())

        organisations          UsersOnOrganisations[]
        OrganisationInvitation OrganisationInvitation[]
}

model Link {
        id          Int     @id @default(autoincrement())
        slug        String  @unique
        url         String
        description String
        active      Boolean @default(true)

        creator   User @relation(fields: [creatorId], references: [id])
        creatorId Int

        // Link can either be part of a project or an organisation, but not both.
        // If organisation own the project the link is part of it's organisation's link
        // This is to remove redundancy which can cause ANOMALIES
        project        Project?      @relation(fields: [projectId], references: [id])
        projectId      Int?
        organisation   Organisation? @relation(fields: [organisationId], references: [id])
        organisationId Int?

        createdAt DateTime @default(now())
        updatedAt DateTime @default(now())
}

model Project {
        id          Int     @id @default(autoincrement())
        name        String
        description String?
        links       Link[]

        owner          User?         @relation(fields: [ownerId], references: [id])
        ownerId        Int?
        organisation   Organisation? @relation(fields: [organisationId], references: [id])
        organisationId Int?

        createdAt DateTime @default(now())
        updatedAt DateTime @default(now())
}

model Organisation {
        id          Int     @id @default(autoincrement())
        name        String
        description String?

        links    Link[]
        projects Project[]
        users    UsersOnOrganisations[]


        createdAt              DateTime                 @default(now())
        updatedAt              DateTime                 @default(now())
        OrganisationInvitation OrganisationInvitation[]
}

enum OrganisationMemberRole {
        VIEWER
        MAKER
        ADMIN
}

model UsersOnOrganisations {
        user           User                   @relation(fields: [userId], references: [id])
        userId         Int
        organisation   Organisation           @relation(fields: [organisationId], references: [id])
        organisationId Int
        role           OrganisationMemberRole @default(VIEWER)

        @@id([userId, organisationId])
}

model RefreshToken {
        id        String   @id @default(cuid())
        user      User     @relation(fields: [userId], references: [id])
        userId    Int
        isActive  Boolean  @default(true)
        createdAt DateTime @default(now())
        updatedAt DateTime @default(now())
}

enum OrganisationInvitationStatus {
        PENDING
        CANCELED
        ACCEPTED
        REJECTED
}

model OrganisationInvitation {
        id String @id @default(cuid())

        user   User                   @relation(fields: [userId], references: [id])
        userId Int
        role   OrganisationMemberRole @default(VIEWER)

        organisation   Organisation @relation(fields: [organisationId], references: [id])
        organisationId Int

        status OrganisationInvitationStatus @default(PENDING)

        createdAt DateTime @default(now())
        updatedAt DateTime @default(now())

        @@index([userId, organisationId, status])
}
